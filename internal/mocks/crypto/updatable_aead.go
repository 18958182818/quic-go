// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucas-clemente/quic-go/internal/crypto (interfaces: UpdatableAEAD)

// Package mockcrypto is a generated GoMock package.
package mockcrypto

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	crypto "github.com/lucas-clemente/quic-go/internal/crypto"
	protocol "github.com/lucas-clemente/quic-go/internal/protocol"
)

// MockUpdatableAEAD is a mock of UpdatableAEAD interface
type MockUpdatableAEAD struct {
	ctrl     *gomock.Controller
	recorder *MockUpdatableAEADMockRecorder
}

// MockUpdatableAEADMockRecorder is the mock recorder for MockUpdatableAEAD
type MockUpdatableAEADMockRecorder struct {
	mock *MockUpdatableAEAD
}

// NewMockUpdatableAEAD creates a new mock instance
func NewMockUpdatableAEAD(ctrl *gomock.Controller) *MockUpdatableAEAD {
	mock := &MockUpdatableAEAD{ctrl: ctrl}
	mock.recorder = &MockUpdatableAEADMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdatableAEAD) EXPECT() *MockUpdatableAEADMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockUpdatableAEAD) Next() (crypto.UpdatableAEAD, error) {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(crypto.UpdatableAEAD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next
func (mr *MockUpdatableAEADMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockUpdatableAEAD)(nil).Next))
}

// Open mocks base method
func (m *MockUpdatableAEAD) Open(arg0, arg1 []byte, arg2 protocol.PacketNumber, arg3 []byte) ([]byte, error) {
	ret := m.ctrl.Call(m, "Open", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockUpdatableAEADMockRecorder) Open(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockUpdatableAEAD)(nil).Open), arg0, arg1, arg2, arg3)
}

// Overhead mocks base method
func (m *MockUpdatableAEAD) Overhead() int {
	ret := m.ctrl.Call(m, "Overhead")
	ret0, _ := ret[0].(int)
	return ret0
}

// Overhead indicates an expected call of Overhead
func (mr *MockUpdatableAEADMockRecorder) Overhead() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Overhead", reflect.TypeOf((*MockUpdatableAEAD)(nil).Overhead))
}

// Seal mocks base method
func (m *MockUpdatableAEAD) Seal(arg0, arg1 []byte, arg2 protocol.PacketNumber, arg3 []byte) []byte {
	ret := m.ctrl.Call(m, "Seal", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Seal indicates an expected call of Seal
func (mr *MockUpdatableAEADMockRecorder) Seal(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockUpdatableAEAD)(nil).Seal), arg0, arg1, arg2, arg3)
}
